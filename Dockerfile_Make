# Ubuntu 22.04를 베이스 이미지로 사용
FROM ubuntu:22.04

# 기본 패키지 업데이트 및 필요한 패키지 설치
# build-essential: C/C++ 컴파일러, make 등 필수 개발 도구들을 설치 (소프트웨어 빌드에 필요)
# rm -rf /var/lib/apt/lists/*: 패키지 캐시를 삭제하여 docker 이미지 크기를 줄임
RUN apt-get update && apt-get install -y \
    wget \
    tar \
    build-essential \
 && rm -rf /var/lib/apt/lists/*

# Go 1.22.4 (linux/amd64) 설치
RUN wget https://go.dev/dl/go1.22.4.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go1.22.4.linux-amd64.tar.gz && \
    rm go1.22.4.linux-amd64.tar.gz

# Go 환경 변수 설정 (Go 바이너리가 PATH에 포함되도록)
ENV PATH="/usr/local/go/bin:${PATH}"

# TODO 실제 폴더들을 일딘 확인해봐야함.
# protoc 다운로드 및 설치 (protobuf v26.1)
# 이 tar.gz 파일은 프로토콜 버퍼의 소스 코드 tarball로, 압축 해제 후 bin/protoc 파일이 포함되어 있다고 가정
RUN wget -O protobuf-26.1.tar.gz https://github.com/protocolbuffers/protobuf/releases/download/v26.1/protobuf-26.1.tar.gz && \
    tar -xzf protobuf-26.1.tar.gz && \
    cp protobuf-26.1/bin/protoc /usr/local/bin/ && \
    chmod +x /usr/local/bin/protoc && \
    rm -rf protobuf-26.1 protobuf-26.1.tar.gz \

# TODO 실제 폴더들을 일딘 확인해봐야함.
# protoc-gen-go 설치 (protobuf-go v1.33.0)
RUN wget -O protoc-gen-go.tar.gz https://github.com/protocolbuffers/protobuf-go/releases/download/v1.33.0/protoc-gen-go.v1.33.0.linux.amd64.tar.gz && \
    tar -xzf protoc-gen-go.tar.gz && \
    cp protoc-gen-go /usr/local/bin/ && \
    chmod +x /usr/local/bin/protoc-gen-go && \
    rm -rf protoc-gen-go protoc-gen-go.tar.gz

# protoc-gen-go-grpc 설치 (Go 모듈 시스템을 사용)
# ---------------------------------------------------------------------------------
# protoc-gen-go-grpc는 protoc-gen-go와 달리 공식적으로 미리 컴파일된 바이너리로 제공되지 않는 경우가 많음.
# 따라서, Go 모듈 시스템을 이용하여 소스 코드로부터 직접 빌드하고 설치해야함.
#
# go install 명령어는 지정한 모듈(여기서는 google.golang.org/grpc/cmd/protoc-gen-go-grpc)의 최신 버전을
# 소스 코드에서 빌드하여, 기본적으로 $GOPATH/bin (여기서는 /root/go/bin)에 설치한다.
# 이후, 이 바이너리를 /usr/local/bin으로 복사하고 실행 권한을 부여하여, 시스템 전반에서 사용할 수 있도록 한다.
#
# 이 방식은 미리 컴파일된 바이너리가 없을 때 자동으로 최신 버전을 설치할 수 있는 장점이 있음.
RUN go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest && \
    cp /root/go/bin/protoc-gen-go-grpc /usr/local/bin/ && \
    chmod +x /usr/local/bin/protoc-gen-go-grpc

# 작업 디렉토리 설정. 이후의 COPY, RUN 명령은 모두 /app을 기준으로 실행됨.
WORKDIR /app

# 생성된 proto 결과물을 저장할 디렉토리를 볼륨으로 설정하여 호스트와 공유할 수 있게 함.
VOLUME ["/app/protos"]

# 호스트의 gen 폴더에 있는 Makefile과, 같은 위치의 protos 폴더를 컨테이너로 복사.
# 이 예시에서는 저장소 구조가 Dockerfile, gen, protos가 동일한 루트에 있다고 가정.
COPY gen/Makefile ./
COPY protos ./protos

# Makefile에 정의된 generate 타겟 실행.
# 이때, Makefile은 PROTO_PATH를 "./protos"로 설정해서 /app/protos를 사용하도록 수정되어 있어야 함.
RUN make generate

# 기본 CMD: 필요에 따라 변경 가능
CMD ["bash"]

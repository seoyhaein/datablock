# Ubuntu 22.04를 베이스 이미지로 사용
FROM ubuntu:22.04

# 기본 패키지 업데이트 및 필요한 패키지 설치
# build-essential: C/C++ 컴파일러, make 등 필수 개발 도구들을 설치 (소프트웨어 빌드에 필요)
# rm -rf /var/lib/apt/lists/*: 패키지 캐시를 삭제하여 docker 이미지 크기를 줄임
RUN apt-get update && apt-get install -y \
    wget \
    tar \
    build-essential \
    unzip \
 && rm -rf /var/lib/apt/lists/*

# Go 1.22.4 (linux/amd64) 설치
RUN wget https://go.dev/dl/go1.22.4.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go1.22.4.linux-amd64.tar.gz && \
    rm go1.22.4.linux-amd64.tar.gz

# Go 환경 변수 설정 (Go 바이너리가 PATH에 포함되도록)
ENV PATH="/usr/local/go/bin:${PATH}"

# protoc 다운로드 및 설치 (protobuf v26.1)
RUN wget -O protoc-26.1-linux-x86_64.zip https://github.com/protocolbuffers/protobuf/releases/download/v26.1/protoc-26.1-linux-x86_64.zip && \
    unzip protoc-26.1-linux-x86_64.zip -d protoc-26.1 && \
    cp protoc-26.1/bin/protoc /usr/local/bin/ && \
    chmod +x /usr/local/bin/protoc && \
    rm -rf protoc-26.1 protoc-26.1-linux-x86_64.zip

# TODO 실제 폴더들을 일딘 확인해봐야함.
# protoc-gen-go 설치 (protobuf-go v1.33.0)
RUN wget -O protoc-gen-go.tar.gz https://github.com/protocolbuffers/protobuf-go/releases/download/v1.33.0/protoc-gen-go.v1.33.0.linux.amd64.tar.gz && \
    tar -xzf protoc-gen-go.tar.gz && \
    cp protoc-gen-go /usr/local/bin/ && \
    chmod +x /usr/local/bin/protoc-gen-go && \
    rm -rf protoc-gen-go protoc-gen-go.tar.gz

# protoc-gen-go-grpc 설치 (Go 모듈 시스템을 사용)
# ---------------------------------------------------------------------------------
# protoc-gen-go-grpc는 protoc-gen-go와 달리 공식적으로 미리 컴파일된 바이너리로 제공되지 않는 경우가 많음.
# 따라서, Go 모듈 시스템을 이용하여 소스 코드로부터 직접 빌드하고 설치해야함.
#
# go install 명령어는 지정한 모듈(여기서는 google.golang.org/grpc/cmd/protoc-gen-go-grpc)의 최신 버전을
# 소스 코드에서 빌드하여, 기본적으로 $GOPATH/bin (여기서는 /root/go/bin)에 설치한다.
# 이후, 이 바이너리를 /usr/local/bin으로 복사하고 실행 권한을 부여하여, 시스템 전반에서 사용할 수 있도록 한다.
#
# 이 방식은 미리 컴파일된 바이너리가 없을 때 자동으로 최신 버전을 설치할 수 있는 장점이 있음.
RUN go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest && \
    cp /root/go/bin/protoc-gen-go-grpc /usr/local/bin/ && \
    chmod +x /usr/local/bin/protoc-gen-go-grpc

# 작업 디렉토리 설정. 이후의 COPY, RUN 명령은 모두 /app을 기준으로 실행됨.
WORKDIR /app

# 생성된 proto 결과물을 저장할 디렉토리를 볼륨으로 설정하여 호스트와 공유할 수 있게 함. 사용하지 않아도 명시적으로 나타냄.
VOLUME ["/app/protos"]

# 호스트와 동일한 디렉토리 구조를 만들어줌.
COPY gen/ ./gen/
COPY protos/ ./protos/

# 생각지 못했던 에러 해결.
# 아래와 같은 에러가 발생했었는데, podman을 rootless 로 사용해서 권한의 문제가 발생하였다.
# STEP 13/14: RUN make generate
# ../protos/datablock.pb.go: Input/output error../protos/fileblock.pb.go: Input/output error--> c28cfca224ee

# proto-builder.sh 에서 아래 구문에서
# podman run -it --rm -v "$(pwd)/protos":/app/protos "${IMAGE_NAME}"
# --privileged 를 주어서 권한을 주었다.
# podman run -it --privileged --rm -v "$(pwd)/protos":/app/protos "${IMAGE_NAME}"

# 두 코드 블럭 동일한 기능.
# gen 디렉토리 이동 후 Makefile에 정의된 generate 타겟 실행.

WORKDIR /app/gen
# RUN make generate
# RUN make -C gen generate

# Debug 때믄에 이렇게 잡아놈.
CMD ["make", "generate"]
